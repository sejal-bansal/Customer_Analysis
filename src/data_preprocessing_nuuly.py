# -*- coding: utf-8 -*-
"""Data_Preprocessing_nuuly.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FsCSAl0QbpFNZjmo443ID_KgTa57g4pf

## Customer Purchase Analysis

This notebook focuses on inspecting the **Review Dataset** and transforming it for further analysis. The key steps covered include:

- **Data Handling**:
  - Importing the review dataset using Pandas.
  - Inspecting the structure and contents of the dataset.

- **Data Transformation**:
  - Introducing new columns based on existing data.
  - Assigning values to these columns to prepare the dataset for advanced analysis.


The goal of this notebook is to clean, process, and structure the review dataset into a form that is suitable for deeper analysis in subsequent notebooks.
"""

#loading the libraries
import pandas as pd
import json

#loading the review dataset
with open('./data/raw/reviews.json', 'r') as f:
  data = json.load(f)

df = pd.DataFrame(data)

#printing the contents of the dataframe
df

"""### Extracting Product Details

Below we are extracting relevant product-related data from the `product_df` DataFrame and preparing it for further analysis. The product category (`product_category`) is derived from the product link. The final `product_df` contains the following columns:

- `product_link`: The URL link to the product page.
- `product_name`: The name of the product.
- `product_description`: A short description of the product.
- `product_price`: The price of the product.
- `product_id`: A unique identifier for each product.
- `product_category`: The category of the product, extracted from the `product_link`.

"""

import uuid

# generating product_id
df['product_id'] = [uuid.uuid4() for _ in range(len(df))]

#printing the dataframe
df

#copy df into product_df
product_df = df.copy(deep=True)

#dropping reviews column
product_df = product_df.drop(columns=["reviews"])

#extracting product category from the product link
product_categories = []
for product in product_df["product_link"]:
  x = product.split("-")[-1]
  product_categories.append(x.split("?")[0])
product_df["product_category"] = product_categories

# displaying the first few rows of the updated product_df to verify the 'product_category' column
product_df.head()

#extracting reviews and product_id for review analysis
reviews = df[["reviews", "product_id"]]

reviews

#function to tranform nested review data into a flat dataframe for analysis
import ast

def transform_reviews(df):
    # list to store the transformed rows
    transformed_data = []

    # iterating over each row in the DataFrame
    for _, row in df.iterrows():
        product_id = row['product_id']
        reviews = row['reviews']

        if isinstance(reviews, str):
            reviews = ast.literal_eval(reviews)

        for review in reviews:
            # appending a new row for each review dictionary
            transformed_data.append({
                "product_id": product_id,
                "customer_username": review.get("review_posted_by_username", None),
                "star_ratings": review.get("star_ratings", None),
                "review_date": review.get("review_date", None),
                "user_age": review.get("user_age", None),
                "user_height": review.get("user_height", None),
                "user_size": review.get("user_size", None),
                "user_weight": review.get("user_weight", None),
                "user_body_type": review.get("user_body_type", None),
                "user_color": review.get("user_color", None),
                "review_title": review.get("review_title", None),
                "review_content": review.get("review_text", None),
            })

    # convert the transformed data into a new DataFrame
    transformed_df = pd.DataFrame(transformed_data)

    return transformed_df

#transforming the reviews data into structured format and storing it
final_df = transform_reviews(reviews)

final_df.head()

# creating a mapping of unique customer usernames to user IDs
unique_usernames = final_df["customer_username"].unique()
username_to_userid = {username: f"user_{i+1}" for i, username in enumerate(unique_usernames)}

final_df["customer_userid"] = final_df["customer_username"].map(username_to_userid)

#Drop the 'customer_username' column as it's no longer needed
final_df.drop("customer_username", axis=1, inplace=True)

#merging the product DataFrame with the transformed review DataFrame on 'product_id'
final_final_df = pd.merge(product_df, final_df, on='product_id')

#displaying first few rows
final_final_df.head()

"""### Extracting Customer Details

The `create_customer_df` function, extracts customer-specific details:
- `customer_userid`: A unique identifier for each customer.
- `user_age`: The age of the customer.
- `user_height`: The height of the customer.
- `user_size`: The clothing size of the customer.
- `user_weight`: The weight of the customer.
- `user_body_type`: The body type description of the customer.
- `user_color`: The customer's preferred color.

This function ensures that each customer appears only once by removing duplicate entries based on `customer_userid`. This dataframe(`customer_df`) will be used for customer analysis.

"""

def create_customer_df(df):
    # selecting relevant columns for customer details
    customer_columns = [
        "customer_userid", "user_age", "user_height", "user_size", "user_weight",
        "user_body_type", "user_color"
    ]

    # drop duplicates to ensure one row per unique customer_username
    customer_df = df[customer_columns].drop_duplicates(subset="customer_userid").reset_index(drop=True)

    return customer_df

#extract the unique customer details from the merged DataFrame
customer_df = create_customer_df(final_final_df)

#print the first few rows of the customer DataFrame
customer_df.head()

"""### Extracting Review Details
The `create_review_df` function extracts review-specific details, such as product IDs, customer IDs, star ratings, review dates, titles, and content.
This dataframe (`reviews_df`) will be used to to customer reviews analysis
"""

def create_review_df(df):
  # selecting relevant columns for review details
  review_columns = [
      "product_id", "customer_userid", "star_ratings", "review_date", "review_title", "review_content"
  ]

  review_df = df[review_columns]

  return review_df

#extract review-related details from the merged DataFrame
reviews_df = create_review_df(final_final_df)

#display first few rows of reviews_df
reviews_df.head()

"""### Extracting Order Details
Below we are extracting relevant order-related data from the `reviews_df` DataFrame, and preparing the order_df for further analysis.
Paid amount (`paid_amt`) is calculated by applying a random discount (0% to 50%) to the product price.
Order dates are adjusted by simulating delivery times (adding random days between 2 and 10).
The final order_df contains the following columns:
- `product_id`: Links the order to a specific product.
- `customer_userid`: Identifies the customer placing the order.
- `order_id`: A unique identifier for each order.
- `paid_amt`: The amount paid after applying a random discount.
- `order_date`: The adjusted order date, including simulated delivery times.



"""

#select relevant columns for order-related data
order_df = reviews_df[["product_id", "customer_userid", "review_date"]]

#rename to proper column name
order_df.rename(columns={'review_date': 'order_date'}, inplace=True)

order_df['order_id'] = [uuid.uuid4() for _ in range(len(order_df))]

#display first few rows of order_df
order_df.head()

x_df = pd.merge(product_df, order_df, on="product_id")

import random

#Merge the product prices into the order DataFrame
merged_df = order_df.merge(product_df, on="product_id", how="left")

# Calculate the paid_amt column
order_df["paid_amt"] = merged_df["product_price"].apply(
    lambda price: price - (price * random.uniform(0, 0.50)) if pd.notnull(price) else None
)

#convert the 'order_date' column to datetime format
order_df['order_date'] = pd.to_datetime(order_df['order_date'])

# adjusting the order dates by simulating delivery times
import numpy as np
order_df["new_date"] = order_df['order_date'] - pd.to_timedelta(np.random.randint(2, 10, size=len(order_df)), unit='D')
order_df.drop("order_date", axis=1, inplace=True)
order_df.rename(columns={"new_date": "order_date"})

#print order_df
order_df.head()

#print product_df
product_df.head()

#print customer_df
customer_df.head()

#print reviews_df
reviews_df.head()

order_df.rename(columns={"new_date": "order_date"}, inplace=True)

#exporting all the final transformed dataframes to csv

customer_df.to_csv('customer.csv', index=False)
product_df.to_csv('product.csv', index=False)
order_df.to_csv('order.csv', index=False)
reviews_df.to_csv('reviews.csv', index=False)

print("DataFrames saved to CSV files successfully!")